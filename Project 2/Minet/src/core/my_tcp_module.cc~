#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>


#include <iostream>

#include "Minet.h"
#include "tcpstate.h"

#define initTimer 20

using std::cout;
using std::endl;
using std::cerr;
using std::string;

enum msgstate {
				SendSYN      	= 0,
	      SendACK      	= 1,
	      SendFIN    		= 2,
	      SendRST  		  = 3,
	      SendSYN_ACK   = 4 };


void PushIPHeader(ConnectionToStateMapping<TCPState> map, Packet  *p, int datalen) {
	IPHeader iph;
	iph.SetSourceIP(map.connection.src);
	iph.SetDestIP(map.connection.dest);
	iph.SetProtocol(map.connection.protocol);
	//iph.SetTotalLength((TCP_HEADER_MAX_LENGTH + IP_HEADER_MAX_LENGTH + datalen));
	iph.SetTotalLength(40);
	p->PushFrontHeader(iph);
	cerr << "PushIPHeader : " << iph << endl;
}

void PushTCPHeader(ConnectionToStateMapping<TCPState> map, Packet *p, int msgstate) {
	unsigned char flags = 0;
	TCPHeader tcph;
	
	switch(msgstate) {
		case SendSYN: {
			SET_SYN(flags);
		} break;
		case SendACK: {
			SET_ACK(flags);
		} break;
		case SendFIN: {
			SET_FIN(flags);
		} break;
		case SendRST: {
			SET_RST(flags);
		} break;
		case SendSYN_ACK: {
			SET_SYN(flags);
			SET_ACK(flags);
		} break;
	}

	tcph.SetSourcePort(map.connection.srcport, *p);
	tcph.SetDestPort(map.connection.destport, *p);
	tcph.SetFlags(flags, *p);
	tcph.SetSeqNum(map.state.GetLastSent(), *p);
	tcph.SetAckNum(map.state.GetLastAcked(), *p);
	tcph.SetHeaderLen(TCP_HEADER_BASE_LENGTH / 4, *p);
	tcph.SetWinSize(100, *p);
	tcph.RecomputeChecksum(*p);
	p->PushBackHeader(tcph);
	cerr << "PushTCPHeader : " << tcph << endl;
}

int SendPacket(MinetHandle handle, ConnectionToStateMapping<TCPState> map, char * data, int msgstate) {
	int datalen = strlen(data);
	Packet p(data, datalen);
	PushIPHeader(map, &p, datalen);
	PushTCPHeader(map, &p, msgstate);
	cerr << "PacketSend : " << p << endl;
	MinetSend(handle, p);
	map.state.SetState(SYN_RCVD);
	return 1;
}

int main(int argc, char *argv[])
{
  MinetHandle mux, sock;

	ConnectionList<TCPState> clist;

	char * nulldata = "";//TODO:Works well?

  MinetInit(MINET_TCP_MODULE);
	
  mux=MinetIsModuleInConfig(MINET_IP_MUX) ? MinetConnect(MINET_IP_MUX) : MINET_NOHANDLE;
  sock=MinetIsModuleInConfig(MINET_SOCK_MODULE) ? MinetAccept(MINET_SOCK_MODULE) : MINET_NOHANDLE;

  if (MinetIsModuleInConfig(MINET_IP_MUX) && mux==MINET_NOHANDLE) {
    MinetSendToMonitor(MinetMonitoringEvent("\nCan't connect to mux\n"));
    return -1;
  }

  if (MinetIsModuleInConfig(MINET_SOCK_MODULE) && sock==MINET_NOHANDLE) {
    MinetSendToMonitor(MinetMonitoringEvent("\nCan't accept from sock module\n"));
    return -1;
  }

  MinetSendToMonitor(MinetMonitoringEvent("tcp_module handling TCP traffic\n"));
	
	double timeout = -1;
  MinetEvent event;
	
  while (MinetGetNextEvent(event, timeout)==0) {
    // if we received an unexpected type of event, print error
    if (event.eventtype!=MinetEvent::Dataflow 
	|| event.direction!=MinetEvent::IN) {
      MinetSendToMonitor(MinetMonitoringEvent("Unknown event ignored."));
    // if we received a valid event from Minet, do processing
    } else {
			MinetSendToMonitor(MinetMonitoringEvent("\ninvalid event from Minet\n"));
      cerr << "invalid event from Minet" << endl;
      //  Data from the IP layer below  //
      if (event.handle==mux) {
				MinetSendToMonitor(MinetMonitoringEvent("\nismux\n"));
        Packet p;
				unsigned short len;
				unsigned char IPHeaderLen;
				unsigned short IPPacketLen;
				unsigned char TCPHeaderLen;
				bool checksumok;
		    unsigned char flags;
				unsigned int SeqNum;
				unsigned int AckNum;
      	MinetReceive(mux,p);
        unsigned tcphlen=TCPHeader::EstimateTCPHeaderLength(p);
				MinetSendToMonitor(MinetMonitoringEvent("\nestimated header len=\n"));
        cerr << "estimated header len="<<tcphlen<<"\n";
        p.ExtractHeaderFromPayload<TCPHeader>(tcphlen);
        IPHeader iph=p.FindHeader(Headers::IPHeader);
        TCPHeader tcph=p.FindHeader(Headers::TCPHeader);
				if (!tcph.IsCorrectChecksum(p)||!iph.IsChecksumCorrect()) {
					MinetSendToMonitor(MinetMonitoringEvent("forwarding packet to sock even though checksum failed"));
				}
				
				Connection c;
				iph.GetDestIP(c.src);
				iph.GetSourceIP(c.dest);
				iph.GetProtocol(c.protocol);
				tcph.GetDestPort(c.srcport);
				tcph.GetSourcePort(c.destport);

				tcph.GetFlags(flags);
				tcph.GetSeqNum(SeqNum);
        tcph.GetAckNum(AckNum);
        
				iph.GetHeaderLength(IPHeaderLen);
				iph.GetTotalLength(IPPacketLen);
				tcph.GetHeaderLen(TCPHeaderLen);
				len = IPPacketLen - IPHeaderLen - TCPHeaderLen;
 	      Buffer &data = p.GetPayload().ExtractFront(len);
				MinetSendToMonitor(MinetMonitoringEvent("\nmuxStart\n"));
				cerr << "\nmuxStart\n";

				ConnectionList<TCPState>::iterator cs = clist.FindMatching(c);
				MinetSendToMonitor(MinetMonitoringEvent("\nFindMatching\n"));
				cerr <<"\nFindMatching\n";
				//set timer
				timeout = cs->timeout;
				unsigned int FreshAckNum;
				tcph.GetSeqNum(FreshAckNum);
				cerr << "AckNum = " << FreshAckNum << endl;
				cs->state.last_acked = FreshAckNum; //TODO:Unable to set
				cerr << "AckNum = " << cs->state.GetLastAcked() << endl;
				cs->state.SetLastSent(cs->state.GetLastSent() + 1);

				if (cs!=clist.end()) {
						cerr << "Packet:" << p << endl;
						cerr << "TCP Packet: IP Header is "<<iph<<" and ";
        		cerr << "TCP Header is "<<tcph << " and ";

        		cerr << "Checksum is " << (tcph.IsCorrectChecksum(p) ? "VALID" : "INVALID") << endl;

						cerr << "switch to state : " << cs->state.GetState() << endl;

						switch(cs->state.GetState()) {
							case CLOSED:
								break;

							case LISTEN: {
								if(IS_SYN(flags)) {
									cs->connection = c;
									SendPacket(mux, *cs, nulldata, SendSYN_ACK);
									static bool isFirst = false;
									if(!isFirst) {
										isFirst = true;
									} else {
										cs->state.SetState(SYN_RCVD);
									}
								}
							} break;

							case SYN_RCVD: {
								if(IS_ACK(flags)) {
									cs->state.SetState(ESTABLISHED);
								}
								if(IS_RST(flags)) {
									cs->state.SetState(LISTEN);
								}
							} break;

							case SYN_SENT: {
								if(IS_SYN(flags) && !IS_ACK(flags)) {
									SendPacket(mux, *cs, nulldata, SendSYN_ACK);
									cs->state.SetState(SYN_RCVD);
								}
								if(IS_SYN(flags) && IS_ACK(flags)) {
									SendPacket(mux, *cs, nulldata, SendACK);
									cs->state.SetState(ESTABLISHED);
								}
							} break;

							case SYN_SENT1:
								break;
							case ESTABLISHED: {
								if(IS_FIN(flags)) {
									SendPacket(mux, *cs, nulldata, SendACK);
									cs->state.SetState(CLOSE_WAIT);
								}
							} break;

							case SEND_DATA:
								break;

							case CLOSE_WAIT:
								break;

							case FIN_WAIT1: {
								if(IS_ACK(flags)) {
									cs->state.SetState(FIN_WAIT2);
								}
								if(IS_FIN(flags) && IS_ACK(flags)) {
									SendPacket(mux, *cs, nulldata, SendACK);
									cs->state.SetState(FIN_WAIT2);
								}
							} break;

							case CLOSING: {
								if(IS_ACK(flags)) {
									cs->state.SetState(TIME_WAIT);
								}
							} break;

							case LAST_ACK: {
								if(IS_ACK(flags)) {
									cs->state.SetState(CLOSED);
								}
							} break;

							case FIN_WAIT2: {
								if(IS_FIN(flags)) {
									SendPacket(mux, *cs, nulldata, SendACK);
									cs->state.SetState(TIME_WAIT);
								}
							} break;

							case TIME_WAIT:
								break;

							default:
								cerr << "invalid state" << endl;
						}
				} else {
					MinetSendToMonitor(MinetMonitoringEvent("Unknown port, sending ICMP error message"));
					IPAddress source;
			 		iph.GetSourceIP(source);
			 		ICMPPacket error(source,DESTINATION_UNREACHABLE,PORT_UNREACHABLE,p);
					MinetSendToMonitor(MinetMonitoringEvent("ICMP error message has been sent to host"));
					MinetSend(mux, error);
				}
      }
			
      //  Data from the Sockets layer above  //
      if (event.handle==sock) {
				MinetSendToMonitor(MinetMonitoringEvent("\nissock\n"));
        SockRequestResponse req2ip;
        MinetReceive(sock,req2ip);
        cerr << "Received Socket Request:" << req2ip << endl;
				
				switch (req2ip.type) {
					case CONNECT: { // Active open to remote
							MinetSendToMonitor(MinetMonitoringEvent("\nActiveOpen\n"));
							cerr <<"\nActiveOpen\n";
							Time initTimeout(initTimer);
							unsigned int initNum = 1;
							unsigned int timeTries = 3;
							TCPState state( initNum, SYN_SENT, timeTries);
							ConnectionToStateMapping<TCPState> new_connection(req2ip.connection, initTimeout, state, true);
							clist.push_front(new_connection);
							SendPacket(mux, new_connection, nulldata, SendSYN);
							//set timer
							timeout = new_connection.timeout;
							//Send response to sock
							SockRequestResponse repl;
							repl.type=STATUS;
							repl.connection=req2ip.connection;
							// buffer is zero bytes
							repl.bytes=0;
							repl.error=EOK;
							MinetSend(sock,repl);
						} break;
						
					case ACCEPT: { // Passive open from remote
							MinetSendToMonitor(MinetMonitoringEvent("\npassiveOpen\n"));
							cerr <<"\nPassiveOpen\n";
							Time initTimeout(initTimer);
							unsigned int initNum = 1;
							unsigned int timeTries = 3;
							TCPState state( initNum, LISTEN, timeTries);
							ConnectionToStateMapping<TCPState> new_connection(req2ip.connection, initTimeout, state, true);
							clist.push_front(new_connection);
							//Send response to sock
							SockRequestResponse repl;
							repl.type=STATUS;
							repl.connection=req2ip.connection;
							// buffer is zero bytes
							repl.bytes=0;
							repl.error=EOK;
							MinetSend(sock,repl);
						} break;
						
					case STATUS:
						// Updata status
						break;
						// case SockRequestResponse::WRITE:
					case WRITE: { //Send TCP data
							ConnectionList<TCPState>::iterator cs = clist.FindMatching(req2ip.connection);
							//set timer
							timeout = cs->timeout;

							if (cs!=clist.end()) {
								unsigned bytes = MIN_MACRO(TCP_MAX_DATA, req2ip.data.GetSize());//TODO Adjust header length dynamicly
								// create the payload of the packet
								Packet p(req2ip.data.ExtractFront(bytes));
								// Make the IP header first since we need it to do the udp checksum
								IPHeader ih;
								ih.SetProtocol(IP_PROTO_TCP);
								ih.SetSourceIP(req2ip.connection.src);
								ih.SetDestIP(req2ip.connection.dest);
								ih.SetTotalLength(bytes+TCP_HEADER_MAX_LENGTH+IP_HEADER_BASE_LENGTH);
								// push it onto the packet
								p.PushFrontHeader(ih);
								// Now build the UDP header
								// notice that we pass along the packet so that the udpheader can find
								// the ip header because it will include some of its fields in the checksum
								TCPHeader th;
								th.SetSourcePort(req2ip.connection.srcport,p);
								th.SetDestPort(req2ip.connection.destport,p);
								/*th.SetSeqNum();
								th.SetAckNum();src/core/tcp_module.cc:105: error: ‘MinetMonsrc’ was not declared in this scope

								th.SetHeaderLen();*/
								//th.SetFlags(SYN);
								/*th.SetWinSize();
								th.ComputeChecksum();*/
								th.SetChecksum(th.ComputeChecksum(p));
								// Now we want to have the tcp header BEHIND the IP header
								p.PushBackHeader(th);
								MinetSend(mux,p);
								cs->state.SetState(SYN_SENT);

								SockRequestResponse repl;
								// repl.type=SockRequestResponse::STATUS;
								repl.type=STATUS;
								repl.connection=req2ip.connection;
								repl.bytes=bytes;
								repl.error=EOK;
								MinetSend(sock,repl);
							}
						} break;
						
						// case SockRequestResponse::FORWARD:
					case FORWARD: { //Forward matching packets
							ConnectionToStateMapping<TCPState> m;
							m.connection=req2ip.connection;
							// remove any old forward that might be there.
							ConnectionList<TCPState>::iterator cs = clist.FindMatching(req2ip.connection);
							//set timer
							timeout = cs->timeout;

							if (cs!=clist.end()) {
								clist.erase(cs);
							}
							clist.push_back(m);
							SockRequestResponse repl;
							// repl.type=SockRequestResponse::STATUS;
							repl.type=STATUS;
							repl.connection=req2ip.connection;
							repl.error=EOK;
							repl.bytes=0;
							MinetSend(sock,repl);
						} break;
						
						// case SockRequestResponse::CLOSE:
					case CLOSE: { //Close connection
							ConnectionList<TCPState>::iterator cs = clist.FindMatching(req2ip.connection);
							//set timer
							timeout = cs->timeout;

							SockRequestResponse repl;
							repl.connection=req2ip.connection;
							// repl.type=SockRequestResponse::STATUS;
							repl.type=STATUS;
							if (cs==clist.end()) {
								repl.error=ENOMATCH;
							} else {
								repl.error=EOK;
								//clist.erase(cs);
								switch(cs->state.GetState()) {
									case SYN_RCVD: {
										SendPacket(mux, *cs, nulldata, SendFIN);
										cs->state.SetState(FIN_WAIT1);
									} break;
									case SYN_SENT: {
										cs->state.SetState(CLOSED);
									} break;
									case ESTABLISHED: {
										SendPacket(mux, *cs, nulldata, SendFIN);
										cs->state.SetState(FIN_WAIT1);
									} break;
									
									case CLOSE_WAIT: {
										SendPacket(mux, *cs, nulldata, SendFIN);
										cs->state.SetState(LAST_ACK);
									} break;
								}
							}
							MinetSend(sock,repl);
						}
						break;
					default:
						{
							SockRequestResponse repl;
							// repl.type=SockRequestResponse::STATUS;
							repl.type=STATUS;
							repl.error=EWHAT;
							MinetSend(sock,repl);
						}
				}
      }
    }
  }
  return 0;
}
